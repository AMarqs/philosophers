valgrind -s --leak-check=full --show-leak-kinds=all --track-origins=yes ./philo 5 800 200 200 7

Chequeo argumentos -> BIEN

-----
INIT
-----

init_data ---------------------------------------------------------

data->num_philos = ft_atoi(argv[1]);
data->time_die = ft_atoi(argv[2]);
data->time_eat = ft_atoi(argv[3]);
data->time_sleep = ft_atoi(argv[4]);
data->must_eat = ft_atoi(argv[5]);
data->dead = 0;
data->done = 0;
---
(init_mutex)
data->forks = malloc(sizeof(pthread_mutex_t) * data->num_philos);
pthread_mutex_init(&data->forks[i], NULL);
data->log = malloc(sizeof(pthread_mutex_t));
pthread_mutex_init(data->log, NULL);
---
data->philos = malloc(sizeof(t_philo) * data->num_philos);


init_philos --------------------------------------------------------

data->init_time = gettime()
data->philos[i].id = i + 1;
data->philos[i].num_meals = 0;
data->philos[i].last_meal = data->init_time;
data->philos[i].l_fork = &data->forks[i];
data->philos[i].l_fork = &data->forks[(i + 1)];
data->philos[i].data = data;

pthread_create(&data->philos[i].thread, NULL, philo_routine, &data->philos[i]);
pthread_join(data->philos[i].thread, NULL);
pthread_create(&dead_thread, NULL, dead_monitor, data);
pthread_join(dead_thread, NULL);
pthread_create(&meal_thread, NULL, meal_monitor, data);
pthread_join(meal_thread, NULL);








--------
MONITOR
--------

dead_monitor ---------------------------------------------------------
pthread_mutex_lock(data->dead_mutex);
data->dead = 1;
pthread_mutex_unlock(data->dead_mutex);








print_log ------------------------------------------------------------
pthread_mutex_lock(data->log);
ft_putstr_fd(log, 1);
pthread_mutex_unlock(data->log);





- hace una funcion dead loop en threads.c












ARREGLAR

data race en:
- print log
- monitor

valgrind --fair-sched=yes --tool=helgrind ./philo 5 600 300 300  